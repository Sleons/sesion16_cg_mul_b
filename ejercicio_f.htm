<!DOCTYPE html>
<html>
  <head>
    <title>OrbitControls Example</title>
    <style>
      html, body { margin: 0; padding: 0; overflow: hidden; }
    </style>
  </head>
  <body>
    <script src="examples/js/three.min.js"></script>
    <script src="examples/js/controls/OrbitControls.js"></script>
    <script>
    var scene, aspect, camera, renderer, controls;
    var startTime = Date.now();
    init();
    animate();
	
    function init() {
	//INICIALIZACIÓN DE LA ESCENA
	scene = new THREE.Scene();
     	scene.background = new THREE.Color( 0xAAAAAA );
	aspect = window.innerWidth / window.innerHeight;
	camera = new THREE.PerspectiveCamera( 45, aspect, 0.1, 1000);
	renderer = new THREE.WebGLRenderer();
	renderer.setSize( window.innerWidth*0.99, window.innerHeight*0.99 );
	document.body.appendChild( renderer.domElement );
        controls = new THREE.OrbitControls( camera, renderer.domElement );
			
	//ELEMENTOS DE ESCENA
	var size = 10;
	var arrowSize = 1;
	var divisions = size;
	var origin = new THREE.Vector3( 0, 0, 0 );
	var x = new THREE.Vector3( 1, 0, 0 );
	var y = new THREE.Vector3( 0, 1, 0 );
	var z = new THREE.Vector3( 0, 0, 1 );
	var color1 = new THREE.Color( 0xFFFFFF );
	var color2 = new THREE.Color( 0x333333 );
	var colorR = new THREE.Color( 0xAA3333 );
	var colorG = new THREE.Color( 0x33AA33 );
	var colorB = new THREE.Color( 0x333366 );
	var colorRd = new THREE.Color( 0xAA6666 );
	var colorGd = new THREE.Color( 0x66AA66 );
	var colorBd = new THREE.Color( 0x6666AA );
		 
    	const ejesXYZ = new THREE.AxesHelper( 100);
    	scene.add( ejesXYZ );

    	function Esfera(){  //Esta es la función que creará y transformará la esfera (Ejercicio e)

    	//Se crea la esfera como indica en el ejercicio.
    	//Esfera sin transformar

        var radio=0.5;
        var lados =8;
        var suavizado = 99;
        var sphereGeometry = new THREE.SphereGeometry(radio,lados,suavizado);
        var basicMaterial = new THREE.MeshLambertMaterial({color: 0xEAEFF2});
        var sphere = new THREE.Mesh(sphereGeometry, basicMaterial);

        scene.add(sphere);

        //Transformacion 
        
        sphere.rotation.set(Math.PI/2, 0, 0);//Se rota la esfera 90 grados para que los polos queden sobre el eje z.
       	alargarZ=3*2;
        sphereGeometry.scale(radio*2,alargarZ,radio*2);//Al estar rotado las coordenadas X,Y,Z son diferentes.
        // los valores 0.5 y 3 deben ser el doble ya que se deben tener en cuenta los ejes negativos para que corresponda con la imagen.
        camera.lookAt(0,0,0);

        //Segunda transformación (Ejercicio f)

        sphere.rotation.z=(Math.PI*53)/-180;//rotación en z para que quede diagonal con respecto al origen, el angulo es -180 ya que si se usa positivo queda en los ejes contrarios a los propuestos en el ejercicio
        sphere.position.x=1.6//Se mueve 1.6 en x para que el polo de abajo quede en el x=0
        sphere.position.z=1.7;//Se mueve 1.7 en z para que el polo de abajo quede en el z=0
        sphere.position.y=1.5;//Se mueve 1.5 en z para que el polo de abajo quede en el y=0
        //Al ver la figura desde este punto, podemos observar que el otro polo esta en x=4 y z=4
        sphere.rotation.y=(Math.PI/4);//se mueve 45 grados ya que planteamos como si fuese un triangulo rectangulo, rotación en y para formar la diagonal en el plano X,Y
  	}


   Esfera(); //Se llama la función que realiza la esfera

   var light = new THREE.PointLight(0xFFFFFF);
   light.position.set(-5,10,15);
   scene.add(light);
	    
   function render() { // Función para renderizar
  	 requestAnimationFrame(render); // Se llama al render
  	 renderer.render(scene, camera); // Se renderiza la escena y la camara
    }
    //CREAR LAS GRILLAS PARA EL ESCENARIO
    var axesHelper = new THREE.AxesHelper( size );
    var gridHelperXY = new THREE.GridHelper( size, divisions, color1, color1);
    var gridHelperXZ = new THREE.GridHelper( size, divisions, color2, color2 );
    var gridHelperYZ = new THREE.GridHelper( size, divisions, color2, color2 );
            
    //ROTARLAS PARA QUE QUEDEN EN EL ESPACIO ADECUADO
    gridHelperXY.rotateOnWorldAxis ( x, THREE.Math.degToRad(90) );
    gridHelperXZ.rotateOnWorldAxis ( y, THREE.Math.degToRad(90) );
    gridHelperYZ.rotateOnWorldAxis ( z, THREE.Math.degToRad(90) );
      
    //CREAR LAS FLECHAS QUE INDICAN LOS EJES DE COORDENADAS 3D
    var arrowX = new THREE.ArrowHelper( x, origin, arrowSize, colorR );
    var arrowY = new THREE.ArrowHelper( y, origin, arrowSize, colorG );
    var arrowZ = new THREE.ArrowHelper( z, origin, arrowSize, colorB );
           
    //AGREGAR A LA ESCENA
    scene.add( gridHelperXZ );
    scene.add( arrowX );	
    scene.add( arrowY );	
    scene.add( arrowZ );
            
    //MOVER LA CÁMARA
    camera.position.x = 0;
    camera.position.y = 0;	 
    camera.position.z = 20;			
    camera.lookAt( origin );
     }
    
    function animate() {
        requestAnimationFrame( animate );
        controls.update();
        render();
    }
    
    function render(){
        renderer.render( scene, camera );
    }
    </script>
  </body>
</html>
